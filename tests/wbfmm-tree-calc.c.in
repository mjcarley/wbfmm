/* This file is part of WBFMM, a Wide-Band Fast Multipole Method code
 *
 * Copyright (C) 2019 Michael Carley
 *
 * WBFMM is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.  WBFMM is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with WBFMM.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <math.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#include <glib.h>

#include <wbfmm.h>

#define BUFSIZE 131072

GTimer *timer ;
gchar *progname ;

gint read_points(gchar *file, WBFMM_REAL **points, gint *nsrc, gint *str) ;

gint read_points(gchar *file, WBFMM_REAL **points, gint *nsrc, gint *str)

{
  FILE *input = stdin ;
  WBFMM_REAL *s ;
  gint i, j ;

  if ( file != NULL ) {
    input = fopen(file, "r") ;
    if ( input == NULL ) {
      fprintf(stderr, "%s: cannot open file %s\n", progname, file) ;
      exit(1) ;
    }
  }

  fscanf(input, "%d", nsrc) ;
  fscanf(input, "%d", str) ;
  fprintf(stderr, "%s: %d point%c\n", 
	  progname, *nsrc, (*nsrc > 1 ? 's' : ' ')) ;
  s = *points = (WBFMM_REAL *)g_malloc0((*str)*(*nsrc)*sizeof(WBFMM_REAL)) ;

  for ( i = 0 ; i < *nsrc ; i ++ ) {
    for ( j = 0 ; j < *str ; j ++ ) 
      fscanf(input, "%FLOATFMT", &(s[(*str)*i+j])) ;
  }

  if ( file != NULL ) fclose(input) ;

  return 0 ;
}

gint main(gint argc, gchar **argv)

{
  wbfmm_tree_t *tree ;
  wbfmm_shift_operators_t *shifts ;
  WBFMM_REAL k, D, xtree[3] = {0.0}, *sources ;
  WBFMM_REAL del, *x, *work, *xf, *f ;
  gint nsrc, i, str, strf, nf ;
  gsize pstr ;
  guint depth, order[48] = {0}, order_s, order_r, order_max, level ;
  guint sizew ;
  guint64 b ;
  gchar ch, *sfile = NULL, *ffile = NULL ;
  gboolean write_sources ;

  k = 1.0 ; D = 1.0 ; nsrc = 1 ; del = 1e-2 ;
  depth = 2 ; str = 5 ; 
  order_s = 8 ; order_r = 8 ; order_max = 24 ;
  write_sources = FALSE ;

  progname = g_strdup(g_path_get_basename(argv[0])) ;
  timer = g_timer_new() ;

  while ( (ch = getopt(argc, argv, "hcd:f:k:R:s:S:w")) != EOF ) {
    switch ( ch ) {
    default:
    case 'h':
      fprintf(stderr,
	      "Usage: %s <options> > <output file>\n\n"
	      "Compute field generated by list of sources at specified "
	      "field points using\n"
	      "Wide Band (some day) Fast Multipole Method\n\n"
	      "Options:\n\n"
	      "  -d # depth of octree (%d)\n"
	      "  -f (field point name)\n"
	      "  -k # wavenumber (%FLOATFMT)\n"
	      "  -R # order of regular expansions at leaf level (%u)\n"
	      "  -S # order of singular expansions at leaf level (%u)\n"
	      "  -s (source file name)\n"
	      "  -w write source data to stdout\n",
	      progname, depth, k, order_r, order_s) ;
      return 0 ;
      break ;
    case 'd': depth = atoi(optarg) ; break ;
    case 'f': ffile = g_strdup(optarg) ; break ;      
    case 'k': k = atof(optarg) ; break ;
    case 'R': order_r = atoi(optarg) ; break ;
    case 'S': order_s = atoi(optarg) ; break ;
    case 's': sfile = g_strdup(optarg) ; break ;
    case 'w': write_sources = TRUE ; break ;
    }
  }

  order[2*depth+0] = order_s ; 
  order[2*depth+1] = order_r ; 
  order_max = MAX(order_s, order_r) ;
  for ( i = depth-1 ; i > 0 ; i -- ) {
    order[2*i+0] = order[2*(i+1)+0] + 4 ;
    order[2*i+1] = order[2*(i+1)+1] + 4 ;
    order_max = MAX(order_max, order[2*i+0]) ;
    order_max = MAX(order_max, order[2*i+1]) ;
  }

  sizew = wbfmm_element_number_rotation(2*order_max) ;
  sizew = MAX(sizew, 16*(wbfmm_coefficient_index_nm(order_max+1,0))) ;
  work = (WBFMM_REAL *)g_malloc0(sizew*sizeof(WBFMM_REAL)) ;

  read_points(sfile, &sources, &nsrc, &str) ;
  if ( ffile != NULL ) {
    read_points(ffile, &xf, &nf, &strf) ;
  } else {
    fprintf(stderr, "%s: field point list must be specified (-f)\n",
	    progname) ;
    return 1 ;
  }

  f = (WBFMM_REAL *)g_malloc0(nf*2*sizeof(WBFMM_REAL)) ;

  wbfmm_points_origin_width_PREC(sources, str, nsrc, xtree, &D) ;

  xtree[0] -= del ; xtree[1] -= del ; xtree[2] -= del ;
  D += 2.0*del ;

  pstr = str*sizeof(WBFMM_REAL) ;
  tree = wbfmm_tree_new_PREC(xtree, D, 2*nsrc) ;

  x = wbfmm_tree_origin(tree) ;
  fprintf(stderr, "%s: box origin: %FLOATFMT %FLOATFMT %FLOATFMT\n",
	  progname, x[0], x[1], x[2]) ;
  fprintf(stderr, "%s: box width: %FLOATFMT\n",
	  progname, wbfmm_tree_width(tree)) ;

  fprintf(stderr, "%s: initializing shift rotation operators; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  wbfmm_shift_angle_table_init_PREC() ;

  shifts = wbfmm_shift_operators_new_PREC(order_max, work) ;

  fprintf(stderr, "%s: shift rotation operators initialized; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  fprintf(stderr, "%s: initializing shift translation operators; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  for ( i = 1 ; i <= depth ; i ++ ) {
    wbfmm_shift_operators_coaxial_SR_init_PREC(shifts, D, i, order[2*i+0], 
					       k, work) ;
  }

  fprintf(stderr, "%s: shift translation operators initialized; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  fprintf(stderr, "%s: initializing upward pass translation operators; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  for ( level = 2 ; level <= depth ; level ++ ) {
    wbfmm_shift_operators_coaxial_SS_init_PREC(shifts, D, level, 
					       order[2*(level-1)+0], 
					       k, work) ;
  }

  fprintf(stderr, "%s: upward pass translation operators initialized; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  wbfmm_tree_add_points_PREC(tree, (gpointer)sources, nsrc, pstr) ;

  for ( i = 0 ; i < depth ; i ++ ) wbfmm_tree_refine_PREC(tree) ;

  if ( write_sources ) {
    wbfmm_tree_write_sources_PREC(tree, &(sources[3]), str, stderr) ;
    
    return 0 ;
  }

  /* wbfmm_tree_print(stdout, tree, wbfmm_tree_depth(tree), FALSE) ; */

  for ( i = 1 ; i <= depth ; i ++ ) {
    wbfmm_tree_coefficient_init_PREC(tree, i, order[2*i+1], order[2*i+0]) ;
  }

  fprintf(stderr, "%s: initializing leaf expansions; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;
  
  wbfmm_tree_leaf_expansions_PREC(tree, k, &(sources[3]), str, work) ;

  fprintf(stderr, "%s: leaf expansions initialized; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  fprintf(stderr, "%s: upward pass; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  for ( level = depth ; level >= 3 ; level -- ) 
    wbfmm_upward_pass_PREC(tree, shifts, level, work) ;

  fprintf(stderr, "%s: upward pass completed; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  fprintf(stderr, "%s: downward pass; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  for ( level = 2 ; level <= depth ; level ++ ) {
    wbfmm_downward_pass_PREC(tree, shifts, level, work) ;
  }

  fprintf(stderr, "%s: downward pass completed; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  level = depth ;

  fprintf(stderr, "%s: computing fmm field; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  for ( i = 0 ; i < nf ; i ++ ) {
    b = wbfmm_point_box_PREC(tree, level, &(xf[i*strf])) ;
    wbfmm_tree_box_local_field_PREC(tree, level, b, k, 
				    &(xf[i*strf]), &(f[2*i]),
  				    &(sources[3]), str, TRUE, work) ;
  }

  fprintf(stderr, "%s: fmm field computed; %lg\n",
	  progname, g_timer_elapsed(timer, NULL)) ;

  for ( i = 0 ; i < nf ; i ++ ) {
    fprintf(stdout, 
	    "%FLOATEXP %FLOATEXP %FLOATEXP %FLOATEXP %FLOATEXP\n",
	    xf[i*strf+0], xf[i*strf+1], xf[i*strf+2], f[2*i+0], f[2*i+1]) ;
  }

  return 0 ;
}
